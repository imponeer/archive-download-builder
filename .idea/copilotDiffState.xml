<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/ci.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/ci.yml" />
              <option name="updatedContent" value="name: CI&#10;&#10;on:&#10;  push:&#10;    branches: [ main, develop ]&#10;  pull_request:&#10;    branches: [ main, develop ]&#10;&#10;jobs:&#10;  test:&#10;    runs-on: ubuntu-latest&#10;    strategy:&#10;      matrix:&#10;        php-version: ['7.4', '8.0', '8.1', '8.2', '8.3']&#10;        dependencies: [lowest, highest]&#10;&#10;    name: PHP ${{ matrix.php-version }} - ${{ matrix.dependencies }}&#10;&#10;    steps:&#10;    - uses: actions/checkout@v4&#10;&#10;    - name: Setup PHP&#10;      uses: shivammathur/setup-php@v2&#10;      with:&#10;        php-version: ${{ matrix.php-version }}&#10;        extensions: mbstring, intl&#10;        coverage: xdebug&#10;&#10;    - name: Validate composer.json and composer.lock&#10;      run: composer validate --strict&#10;&#10;    - name: Cache Composer packages&#10;      id: composer-cache&#10;      uses: actions/cache@v3&#10;      with:&#10;        path: vendor&#10;        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}&#10;        restore-keys: |&#10;          ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-&#10;&#10;    - name: Install dependencies (highest)&#10;      if: matrix.dependencies == 'highest'&#10;      run: composer install --prefer-dist --no-progress&#10;&#10;    - name: Install dependencies (lowest)&#10;      if: matrix.dependencies == 'lowest'&#10;      run: composer update --prefer-lowest --prefer-dist --no-progress&#10;&#10;    - name: Run test suite&#10;      run: composer run-script test&#10;&#10;    - name: Check code style&#10;      run: composer run-script phpcs&#10;&#10;    - name: Run static analysis&#10;      run: composer run-script phpstan" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.github/workflows/coverage.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/coverage.yml" />
              <option name="updatedContent" value="name: Code Coverage&#10;&#10;on:&#10;  push:&#10;    branches: [ main ]&#10;  pull_request:&#10;    branches: [ main ]&#10;&#10;jobs:&#10;  coverage:&#10;    runs-on: ubuntu-latest&#10;    name: Code Coverage&#10;&#10;    steps:&#10;    - uses: actions/checkout@v4&#10;&#10;    - name: Setup PHP&#10;      uses: shivammathur/setup-php@v2&#10;      with:&#10;        php-version: '8.2'&#10;        extensions: mbstring, intl&#10;        coverage: xdebug&#10;&#10;    - name: Cache Composer packages&#10;      uses: actions/cache@v3&#10;      with:&#10;        path: vendor&#10;        key: ${{ runner.os }}-php-coverage-${{ hashFiles('**/composer.lock') }}&#10;        restore-keys: |&#10;          ${{ runner.os }}-php-coverage-&#10;&#10;    - name: Install dependencies&#10;      run: composer install --prefer-dist --no-progress&#10;&#10;    - name: Run tests with coverage&#10;      run: vendor/bin/phpunit --coverage-clover coverage.xml&#10;&#10;    - name: Upload coverage to Codecov&#10;      uses: codecov/codecov-action@v3&#10;      with:&#10;        file: ./coverage.xml&#10;        flags: unittests&#10;        name: codecov-umbrella" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.github/workflows/release.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/release.yml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.github/workflows/security.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/security.yml" />
              <option name="updatedContent" value="name: Security Check&#10;&#10;on:&#10;  push:&#10;    branches: [ main, develop ]&#10;  pull_request:&#10;    branches: [ main, develop ]&#10;  schedule:&#10;    - cron: '0 0 * * 0'  # Run weekly&#10;&#10;jobs:&#10;  security:&#10;    runs-on: ubuntu-latest&#10;    name: Security Check&#10;&#10;    steps:&#10;    - uses: actions/checkout@v4&#10;&#10;    - name: Setup PHP&#10;      uses: shivammathur/setup-php@v2&#10;      with:&#10;        php-version: '8.2'&#10;        extensions: mbstring, intl&#10;&#10;    - name: Cache Composer packages&#10;      uses: actions/cache@v3&#10;      with:&#10;        path: vendor&#10;        key: ${{ runner.os }}-php-security-${{ hashFiles('**/composer.lock') }}&#10;        restore-keys: |&#10;          ${{ runner.os }}-php-security-&#10;&#10;    - name: Install dependencies&#10;      run: composer install --prefer-dist --no-progress&#10;&#10;    - name: Run security check&#10;      run: composer audit" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LICENSE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LICENSE.md" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="MIT License&#10;&#10;Copyright (c) 2025 Imponeer&#10;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;in the Software without restriction, including without limitation the rights&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;copies of the Software, and to permit persons to whom the Software is&#10;furnished to do so, subject to the following conditions:&#10;&#10;The above copyright notice and this permission notice shall be included in all&#10;copies or substantial portions of the Software.&#10;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#10;SOFTWARE." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Archive Download Builder&#10;&#10;[![PHP Version](https://img.shields.io/badge/php-%5E8.3-blue)](https://php.net)&#10;[![License](https://img.shields.io/badge/license-MIT-green)](LICENSE)&#10;[![Latest Release](https://img.shields.io/github/v/release/imponeer/archive-download-builder)](https://github.com/imponeer/archive-download-builder/releases)&#10;[![Downloads](https://img.shields.io/packagist/dt/imponeer/archive-download-builder)](https://packagist.org/packages/imponeer/archive-download-builder)&#10;&#10;A PHP library for building and downloading archive files (ZIP and TAR.GZ) with support for various file sources through the [Flysystem](https://flysystem.thephpleague.com/) abstraction layer.&#10;&#10;This library is a modern rewrite of the [XOOPS](https://xoops.org/) downloader classes ([Downloader](https://github.com/XOOPS/XoopsCore25/blob/master/htdocs/class/downloader.php), [ZipDownloader](https://github.com/XOOPS/XoopsCore25/blob/master/htdocs/class/zipdownloader.php), [TarDownloader](https://github.com/XOOPS/XoopsCore25/blob/master/htdocs/class/tardownloader.php)) with MIT license compatibility and modern PHP coding standards.&#10;&#10;## Installation&#10;&#10;Install via Composer:&#10;&#10;```bash&#10;composer require imponeer/archive-download-builder&#10;```&#10;&#10;## Examples&#10;&#10;### Simple ZIP Archive (using default filesystem)&#10;&#10;```php&#10;&lt;?php&#10;&#10;use Imponeer\ArchiveDownloadBuilder\ZipDownloader;&#10;&#10;// Create ZIP downloader (uses entire filesystem as base when no filesystem is specified)&#10;$downloader = new ZipDownloader();&#10;&#10;// Add files from anywhere on the filesystem&#10;$downloader-&gt;addFile('/path/to/document.pdf');&#10;$downloader-&gt;addFile('/home/user/image.jpg', 'renamed-image.jpg');&#10;&#10;// Add file data directly&#10;$downloader-&gt;addFileData('Hello World!', 'hello.txt');&#10;&#10;// Generate and download&#10;$downloader-&gt;download('my-archive');&#10;```&#10;&#10;### ZIP Archive with Custom Filesystem&#10;&#10;```php&#10;&lt;?php&#10;&#10;use Imponeer\ArchiveDownloadBuilder\ZipDownloader;&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\Local\LocalFilesystemAdapter;&#10;&#10;// Create filesystem adapter for a specific directory&#10;$filesystem = new Filesystem(new LocalFilesystemAdapter('/path/to/files'));&#10;&#10;// Create ZIP downloader with custom filesystem&#10;$downloader = new ZipDownloader(filesystem: $filesystem);&#10;&#10;// Add files to archive (paths are relative to the filesystem adapter)&#10;$downloader-&gt;addFile('document.pdf');&#10;$downloader-&gt;addFile('image.jpg', 'renamed-image.jpg');&#10;&#10;// Add file data directly&#10;$downloader-&gt;addFileData('Hello World!', 'hello.txt');&#10;&#10;// Generate and download&#10;$downloader-&gt;download('my-archive');&#10;```&#10;&#10;### Basic TAR.GZ Archive&#10;&#10;```php&#10;&lt;?php&#10;&#10;use Imponeer\ArchiveDownloadBuilder\TarDownloader;&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\Local\LocalFilesystemAdapter;&#10;&#10;// Create filesystem adapter&#10;$filesystem = new Filesystem(new LocalFilesystemAdapter('/path/to/files'));&#10;&#10;// Create TAR downloader&#10;$downloader = new TarDownloader(filesystem: $filesystem);&#10;&#10;// Add files to archive&#10;$downloader-&gt;addFile('config.json');&#10;$downloader-&gt;addBinaryFile('data.bin', 'backup-data.bin');&#10;&#10;// Generate and download&#10;$downloader-&gt;download('backup');&#10;```&#10;&#10;### Custom MIME Types and Extensions&#10;&#10;```php&#10;// Custom ZIP configuration&#10;$zipDownloader = new ZipDownloader(&#10;    ext: '.custom.zip',&#10;    mimetype: 'application/custom-zip',&#10;    filesystem: $filesystem&#10;);&#10;&#10;// Custom TAR configuration&#10;$tarDownloader = new TarDownloader(&#10;    ext: '.backup.tar.gz',&#10;    mimetype: 'application/x-compressed-tar',&#10;    filesystem: $filesystem,&#10;    tmpPath: '/custom/temp/path'&#10;);&#10;```&#10;&#10;### Working with Different Filesystems&#10;&#10;```php&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\InMemory\InMemoryFilesystemAdapter;&#10;use League\Flysystem\Ftp\FtpAdapter;&#10;use League\Flysystem\AwsS3V3\AwsS3V3Adapter;&#10;&#10;// In-memory filesystem&#10;$memoryFs = new Filesystem(new InMemoryFilesystemAdapter());&#10;$downloader = new ZipDownloader(filesystem: $memoryFs);&#10;&#10;// FTP filesystem&#10;$ftpFs = new Filesystem(new FtpAdapter($ftpConfig));&#10;$downloader = new ZipDownloader(filesystem: $ftpFs);&#10;&#10;// AWS S3 filesystem&#10;$s3Fs = new Filesystem(new AwsS3V3Adapter($s3Client, $bucket));&#10;$downloader = new ZipDownloader(filesystem: $s3Fs);&#10;```&#10;&#10;### PSR-7 Response Integration&#10;&#10;```php&#10;// Get PSR-7 response instead of direct download&#10;$response = $downloader-&gt;toResponse('archive-name');&#10;&#10;// Use with your favorite HTTP framework&#10;// Symfony&#10;return new Response($response-&gt;getBody(), $response-&gt;getStatusCode(), $response-&gt;getHeaders());&#10;&#10;// Laravel&#10;return response($response-&gt;getBody(), $response-&gt;getStatusCode(), $response-&gt;getHeaders());&#10;&#10;// Slim Framework&#10;return $response; // Direct usage&#10;```&#10;&#10;### Bulk File Operations&#10;&#10;```php&#10;use League\Flysystem\FileAttributes;&#10;&#10;// Add all files from a directory&#10;foreach ($filesystem-&gt;listContents('/documents', true) as $item) {&#10;    if ($item instanceof FileAttributes) {&#10;        $downloader-&gt;addFile($item-&gt;path());&#10;    }&#10;}&#10;&#10;// Add files with custom naming pattern&#10;$files = ['report1.pdf', 'report2.pdf', 'summary.doc'];&#10;foreach ($files as $index =&gt; $file) {&#10;    $downloader-&gt;addFile($file, sprintf('report_%02d_%s', $index + 1, basename($file)));&#10;}&#10;```&#10;&#10;### Error Handling&#10;&#10;```php&#10;use PhpZip\Exception\ZipException;&#10;use League\Flysystem\FilesystemException;&#10;&#10;try {&#10;    $downloader = new ZipDownloader(filesystem: $filesystem);&#10;    $downloader-&gt;addFile('nonexistent-file.txt');&#10;    $downloader-&gt;download('archive');&#10;} catch (FilesystemException $e) {&#10;    // Handle filesystem errors (file not found, permission issues, etc.)&#10;    echo &quot;Filesystem error: &quot; . $e-&gt;getMessage();&#10;} catch (ZipException $e) {&#10;    // Handle ZIP-specific errors&#10;    echo &quot;ZIP error: &quot; . $e-&gt;getMessage();&#10;}&#10;```&#10;&#10;## Documentation&#10;&#10;API documentation is automatically generated and available in the [project's wiki](https://github.com/imponeer/archive-download-builder/wiki). For more detailed information about the classes and methods, please refer to the project wiki.&#10;&#10;## Development&#10;&#10;### Running Tests&#10;&#10;```bash&#10;composer test&#10;```&#10;&#10;### Code Quality&#10;&#10;```bash&#10;# PHP CodeSniffer&#10;composer phpcs&#10;&#10;# Fix coding standards&#10;composer phpcbf&#10;&#10;# Static analysis&#10;composer phpstan&#10;```&#10;&#10;## Contributing&#10;&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;Please ensure your code follows PSR-12 standards and includes appropriate tests.&#10;&#10;## Support&#10;&#10;For issues and questions, please use the [GitHub Issues](https://github.com/imponeer/archive-download-builder/issues) page.&#10;" />
              <option name="updatedContent" value="# Archive Download Builder&#10;&#10;[![PHP Version](https://img.shields.io/badge/php-%5E8.3-blue)](https://php.net)&#10;[![License](https://img.shields.io/badge/license-MIT-green)](LICENSE.md)&#10;[![Latest Release](https://img.shields.io/github/v/release/imponeer/archive-download-builder)](https://github.com/imponeer/archive-download-builder/releases)&#10;[![Downloads](https://img.shields.io/packagist/dt/imponeer/archive-download-builder)](https://packagist.org/packages/imponeer/archive-download-builder)&#10;&#10;A PHP library for building and downloading archive files (ZIP and TAR.GZ) with support for various file sources through the [Flysystem](https://flysystem.thephpleague.com/) abstraction layer.&#10;&#10;This library is a modern rewrite of the [XOOPS](https://xoops.org/) downloader classes ([Downloader](https://github.com/XOOPS/XoopsCore25/blob/master/htdocs/class/downloader.php), [ZipDownloader](https://github.com/XOOPS/XoopsCore25/blob/master/htdocs/class/zipdownloader.php), [TarDownloader](https://github.com/XOOPS/XoopsCore25/blob/master/htdocs/class/tardownloader.php)) with MIT license compatibility and modern PHP coding standards.&#10;&#10;## Installation&#10;&#10;Install via Composer:&#10;&#10;```bash&#10;composer require imponeer/archive-download-builder&#10;```&#10;&#10;## Examples&#10;&#10;### Simple ZIP Archive (using default filesystem)&#10;&#10;```php&#10;&lt;?php&#10;&#10;use Imponeer\ArchiveDownloadBuilder\ZipDownloader;&#10;&#10;// Create ZIP downloader (uses entire filesystem as base when no filesystem is specified)&#10;$downloader = new ZipDownloader();&#10;&#10;// Add files from anywhere on the filesystem&#10;$downloader-&gt;addFile('/path/to/document.pdf');&#10;$downloader-&gt;addFile('/home/user/image.jpg', 'renamed-image.jpg');&#10;&#10;// Add file data directly&#10;$downloader-&gt;addFileData('Hello World!', 'hello.txt');&#10;&#10;// Generate and download&#10;$downloader-&gt;download('my-archive');&#10;```&#10;&#10;### ZIP Archive with Custom Filesystem&#10;&#10;```php&#10;&lt;?php&#10;&#10;use Imponeer\ArchiveDownloadBuilder\ZipDownloader;&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\Local\LocalFilesystemAdapter;&#10;&#10;// Create filesystem adapter for a specific directory&#10;$filesystem = new Filesystem(new LocalFilesystemAdapter('/path/to/files'));&#10;&#10;// Create ZIP downloader with custom filesystem&#10;$downloader = new ZipDownloader(filesystem: $filesystem);&#10;&#10;// Add files to archive (paths are relative to the filesystem adapter)&#10;$downloader-&gt;addFile('document.pdf');&#10;$downloader-&gt;addFile('image.jpg', 'renamed-image.jpg');&#10;&#10;// Add file data directly&#10;$downloader-&gt;addFileData('Hello World!', 'hello.txt');&#10;&#10;// Generate and download&#10;$downloader-&gt;download('my-archive');&#10;```&#10;&#10;### Basic TAR.GZ Archive&#10;&#10;```php&#10;&lt;?php&#10;&#10;use Imponeer\ArchiveDownloadBuilder\TarDownloader;&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\Local\LocalFilesystemAdapter;&#10;&#10;// Create filesystem adapter&#10;$filesystem = new Filesystem(new LocalFilesystemAdapter('/path/to/files'));&#10;&#10;// Create TAR downloader&#10;$downloader = new TarDownloader(filesystem: $filesystem);&#10;&#10;// Add files to archive&#10;$downloader-&gt;addFile('config.json');&#10;$downloader-&gt;addBinaryFile('data.bin', 'backup-data.bin');&#10;&#10;// Generate and download&#10;$downloader-&gt;download('backup');&#10;```&#10;&#10;### Custom MIME Types and Extensions&#10;&#10;```php&#10;// Custom ZIP configuration&#10;$zipDownloader = new ZipDownloader(&#10;    ext: '.custom.zip',&#10;    mimetype: 'application/custom-zip',&#10;    filesystem: $filesystem&#10;);&#10;&#10;// Custom TAR configuration&#10;$tarDownloader = new TarDownloader(&#10;    ext: '.backup.tar.gz',&#10;    mimetype: 'application/x-compressed-tar',&#10;    filesystem: $filesystem,&#10;    tmpPath: '/custom/temp/path'&#10;);&#10;```&#10;&#10;### Working with Different Filesystems&#10;&#10;```php&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\InMemory\InMemoryFilesystemAdapter;&#10;use League\Flysystem\Ftp\FtpAdapter;&#10;use League\Flysystem\AwsS3V3\AwsS3V3Adapter;&#10;&#10;// In-memory filesystem&#10;$memoryFs = new Filesystem(new InMemoryFilesystemAdapter());&#10;$downloader = new ZipDownloader(filesystem: $memoryFs);&#10;&#10;// FTP filesystem&#10;$ftpFs = new Filesystem(new FtpAdapter($ftpConfig));&#10;$downloader = new ZipDownloader(filesystem: $ftpFs);&#10;&#10;// AWS S3 filesystem&#10;$s3Fs = new Filesystem(new AwsS3V3Adapter($s3Client, $bucket));&#10;$downloader = new ZipDownloader(filesystem: $s3Fs);&#10;```&#10;&#10;### PSR-7 Response Integration&#10;&#10;```php&#10;// Get PSR-7 response instead of direct download&#10;$response = $downloader-&gt;toResponse('archive-name');&#10;&#10;// Use with your favorite HTTP framework&#10;// Symfony&#10;return new Response($response-&gt;getBody(), $response-&gt;getStatusCode(), $response-&gt;getHeaders());&#10;&#10;// Laravel&#10;return response($response-&gt;getBody(), $response-&gt;getStatusCode(), $response-&gt;getHeaders());&#10;&#10;// Slim Framework&#10;return $response; // Direct usage&#10;```&#10;&#10;### Bulk File Operations&#10;&#10;```php&#10;use League\Flysystem\FileAttributes;&#10;&#10;// Add all files from a directory&#10;foreach ($filesystem-&gt;listContents('/documents', true) as $item) {&#10;    if ($item instanceof FileAttributes) {&#10;        $downloader-&gt;addFile($item-&gt;path());&#10;    }&#10;}&#10;&#10;// Add files with custom naming pattern&#10;$files = ['report1.pdf', 'report2.pdf', 'summary.doc'];&#10;foreach ($files as $index =&gt; $file) {&#10;    $downloader-&gt;addFile($file, sprintf('report_%02d_%s', $index + 1, basename($file)));&#10;}&#10;```&#10;&#10;### Error Handling&#10;&#10;```php&#10;use PhpZip\Exception\ZipException;&#10;use League\Flysystem\FilesystemException;&#10;&#10;try {&#10;    $downloader = new ZipDownloader(filesystem: $filesystem);&#10;    $downloader-&gt;addFile('nonexistent-file.txt');&#10;    $downloader-&gt;download('archive');&#10;} catch (FilesystemException $e) {&#10;    // Handle filesystem errors (file not found, permission issues, etc.)&#10;    echo &quot;Filesystem error: &quot; . $e-&gt;getMessage();&#10;} catch (ZipException $e) {&#10;    // Handle ZIP-specific errors&#10;    echo &quot;ZIP error: &quot; . $e-&gt;getMessage();&#10;}&#10;```&#10;&#10;## Documentation&#10;&#10;API documentation is automatically generated and available in the [project's wiki](https://github.com/imponeer/archive-download-builder/wiki). For more detailed information about the classes and methods, please refer to the project wiki.&#10;&#10;## Development&#10;&#10;### Running Tests&#10;&#10;```bash&#10;composer test&#10;```&#10;&#10;### Code Quality&#10;&#10;```bash&#10;# PHP CodeSniffer&#10;composer phpcs&#10;&#10;# Fix coding standards&#10;composer phpcbf&#10;&#10;# Static analysis&#10;composer phpstan&#10;```&#10;&#10;## Contributing&#10;&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;Please ensure your code follows PSR-12 standards and includes appropriate tests.&#10;&#10;## Support&#10;&#10;For issues and questions, please use the [GitHub Issues](https://github.com/imponeer/archive-download-builder/issues) page." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composer.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composer.json" />
              <option name="originalContent" value="{&#10;    &quot;name&quot;: &quot;imponeer/archive-download-builder&quot;,&#10;    &quot;description&quot;: &quot;A PHP library for building and downloading archive files (ZIP and TAR.GZ) with support for various file sources through the Flysystem abstraction layer&quot;,&#10;    &quot;type&quot;: &quot;library&quot;,&#10;    &quot;license&quot;: &quot;MIT&quot;,&#10;    &quot;authors&quot;: [&#10;        {&#10;            &quot;name&quot;: &quot;Raimondas Rimkevičius (aka MekDrop)&quot;,&#10;            &quot;email&quot;: &quot;mekdrop@impresscms.org&quot;,&#10;            &quot;homepage&quot;: &quot;https://www.impresscms.org&quot;,&#10;            &quot;role&quot;: &quot;Developer&quot;&#10;        }&#10;    ],&#10;    &quot;require&quot;: {&#10;        &quot;php&quot;: &quot;^8.3&quot;,&#10;        &quot;nelexa/zip&quot;: &quot;^4.0&quot;,&#10;        &quot;league/flysystem&quot;: &quot;^3.0&quot;,&#10;        &quot;nyholm/psr7&quot;: &quot;^1.8&quot;,&#10;        &quot;httpsoft/http-emitter&quot;: &quot;^1.1&quot;,&#10;        &quot;pear/archive_tar&quot;: &quot;^1.6&quot;&#10;    },&#10;    &quot;autoload&quot;: {&#10;        &quot;psr-4&quot;: {&#10;            &quot;Imponeer\\ArchiveDownloadBuilder\\&quot;: &quot;src/&quot;&#10;        }&#10;    },&#10;    &quot;autoload-dev&quot;: {&#10;        &quot;psr-4&quot;: {&#10;            &quot;Imponeer\\ArchiveDownloadBuilder\\Tests\\&quot;: &quot;tests/&quot;&#10;        }&#10;    },&#10;    &quot;require-dev&quot;: {&#10;        &quot;phpunit/phpunit&quot;: &quot;^12&quot;,&#10;        &quot;squizlabs/php_codesniffer&quot;: &quot;^3.7&quot;,&#10;        &quot;phpstan/phpstan&quot;: &quot;^1.10&quot;,&#10;        &quot;league/flysystem-memory&quot;: &quot;^3.29&quot;&#10;    },&#10;    &quot;scripts&quot;: {&#10;        &quot;test&quot;: &quot;phpunit&quot;,&#10;        &quot;phpcs&quot;: &quot;phpcs&quot;,&#10;        &quot;phpcbf&quot;: &quot;phpcbf&quot;,&#10;        &quot;phpstan&quot;: &quot;phpstan analyse&quot;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;    &quot;name&quot;: &quot;imponeer/archive-download-builder&quot;,&#10;    &quot;description&quot;: &quot;A PHP library for building and downloading archive files (ZIP and TAR.GZ) with optional Flysystem support for various file sources&quot;,&#10;    &quot;type&quot;: &quot;library&quot;,&#10;    &quot;license&quot;: &quot;MIT&quot;,&#10;    &quot;authors&quot;: [&#10;        {&#10;            &quot;name&quot;: &quot;Raimondas Rimkevičius (aka MekDrop)&quot;,&#10;            &quot;email&quot;: &quot;mekdrop@impresscms.org&quot;,&#10;            &quot;homepage&quot;: &quot;https://www.impresscms.org&quot;,&#10;            &quot;role&quot;: &quot;Developer&quot;&#10;        }&#10;    ],&#10;    &quot;require&quot;: {&#10;        &quot;php&quot;: &quot;^8.3&quot;,&#10;        &quot;nelexa/zip&quot;: &quot;^4.0&quot;,&#10;        &quot;league/flysystem&quot;: &quot;^3.0&quot;,&#10;        &quot;nyholm/psr7&quot;: &quot;^1.8&quot;,&#10;        &quot;httpsoft/http-emitter&quot;: &quot;^1.1&quot;,&#10;        &quot;pear/archive_tar&quot;: &quot;^1.6&quot;&#10;    },&#10;    &quot;autoload&quot;: {&#10;        &quot;psr-4&quot;: {&#10;            &quot;Imponeer\\ArchiveDownloadBuilder\\&quot;: &quot;src/&quot;&#10;        }&#10;    },&#10;    &quot;autoload-dev&quot;: {&#10;        &quot;psr-4&quot;: {&#10;            &quot;Imponeer\\ArchiveDownloadBuilder\\Tests\\&quot;: &quot;tests/&quot;&#10;        }&#10;    },&#10;    &quot;require-dev&quot;: {&#10;        &quot;phpunit/phpunit&quot;: &quot;^12&quot;,&#10;        &quot;squizlabs/php_codesniffer&quot;: &quot;^3.7&quot;,&#10;        &quot;phpstan/phpstan&quot;: &quot;^1.10&quot;,&#10;        &quot;league/flysystem-memory&quot;: &quot;^3.29&quot;&#10;    },&#10;    &quot;scripts&quot;: {&#10;        &quot;test&quot;: &quot;phpunit&quot;,&#10;        &quot;phpcs&quot;: &quot;phpcs&quot;,&#10;        &quot;phpcbf&quot;: &quot;phpcbf&quot;,&#10;        &quot;phpstan&quot;: &quot;phpstan analyse&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/phpcs.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/phpcs.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#10;&lt;ruleset name=&quot;Package Downloader&quot;&gt;&#10;    &lt;!-- Use PSR-12 coding standard --&gt;&#10;    &lt;rule ref=&quot;PSR12&quot;/&gt;&#10;&#10;    &lt;!-- Exclude vendor directory --&gt;&#10;    &lt;exclude-pattern&gt;*/vendor/*&lt;/exclude-pattern&gt;&#10;&#10;    &lt;!-- Files and directories to scan --&gt;&#10;    &lt;file&gt;src&lt;/file&gt;&#10;    &lt;file&gt;tests&lt;/file&gt;&#10;&lt;/ruleset&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/TarDownloader.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/TarDownloader.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;declare(strict_types=1);&#10;&#10;namespace Imponeer\PackageDownloader;&#10;&#10;use Archive_Tar;&#10;use League\Flysystem\Filesystem;&#10;use Nyholm\Psr7\Factory\Psr17Factory;&#10;use Psr\Http\Message\ResponseInterface;&#10;&#10;class TarDownloader extends Downloader&#10;{&#10;    private string $tmpFile;&#10;    private Archive_Tar $archive;&#10;&#10;    public function __construct(&#10;        string $ext = '.tar.gz',&#10;        string $mimetype = 'application/x-gzip',&#10;        ?Filesystem $filesystem = null,&#10;        ?string $tmpPath = null,&#10;    ) {&#10;        parent::__construct($ext, $mimetype, $filesystem);&#10;&#10;        $this-&gt;tmpFile = ($tmpPath ?: sys_get_temp_dir()) . DIRECTORY_SEPARATOR . uniqid('tar_', true) . '.tar.gz';&#10;        $this-&gt;archive = new Archive_Tar($this-&gt;tmpFile, 'gz');&#10;    }&#10;&#10;    public function addFile(string $filePath, ?string $newFilename = null): void&#10;    {&#10;        $this-&gt;archive-&gt;addString(&#10;            $this-&gt;resolveFilename($filePath, $newFilename),&#10;            $this-&gt;filesystem-&gt;read($filePath),&#10;            $this-&gt;filesystem-&gt;lastModified($filePath),&#10;        );&#10;    }&#10;&#10;    public function addBinaryFile(string $filePath, ?string $newFilename = null): void&#10;    {&#10;        $this-&gt;addFile($filePath, $newFilename);&#10;    }&#10;&#10;    public function addFileData(string $data, string $filename, int $time = 0): void&#10;    {&#10;        $this-&gt;archive-&gt;addString($filename, $data, $time);&#10;    }&#10;&#10;    public function addBinaryFileData(string $data, string $filename, int $time = 0): void&#10;    {&#10;        $this-&gt;addFileData($data, $filename, $time);&#10;    }&#10;&#10;    public function toResponse(string $name = 'archive'): ResponseInterface&#10;    {&#10;        $responseFactory = new Psr17Factory();&#10;        $streamFactory = new Psr17Factory();&#10;&#10;        $stream = $streamFactory-&gt;createStreamFromFile($this-&gt;tmpFile, 'rb');&#10;&#10;        return $responseFactory-&gt;createResponse(200)&#10;            -&gt;withHeader('Content-Type', $this-&gt;mimetype)&#10;            -&gt;withHeader('Content-Disposition', sprintf('attachment; filename=&quot;%s%s&quot;', $name, $this-&gt;ext))&#10;            -&gt;withHeader('Expires', '0')&#10;            -&gt;withHeader('Pragma', 'no-cache')&#10;            -&gt;withBody($stream);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;declare(strict_types=1);&#10;&#10;namespace Imponeer\ArchiveDownloadBuilder;&#10;&#10;use Archive_Tar;&#10;use League\Flysystem\Filesystem;&#10;use Nyholm\Psr7\Factory\Psr17Factory;&#10;use Psr\Http\Message\ResponseInterface;&#10;&#10;class TarDownloader extends Downloader&#10;{&#10;    private string $tmpFile;&#10;    private Archive_Tar $archive;&#10;&#10;    public function __construct(&#10;        string $ext = '.tar.gz',&#10;        string $mimetype = 'application/x-gzip',&#10;        ?Filesystem $filesystem = null,&#10;        ?string $tmpPath = null,&#10;    ) {&#10;        parent::__construct($ext, $mimetype, $filesystem);&#10;&#10;        $this-&gt;tmpFile = ($tmpPath ?: sys_get_temp_dir()) . DIRECTORY_SEPARATOR . uniqid('tar_', true) . '.tar.gz';&#10;        $this-&gt;archive = new Archive_Tar($this-&gt;tmpFile, 'gz');&#10;    }&#10;&#10;    public function addFile(string $filePath, ?string $newFilename = null): void&#10;    {&#10;        $this-&gt;archive-&gt;addString(&#10;            $this-&gt;resolveFilename($filePath, $newFilename),&#10;            $this-&gt;filesystem-&gt;read($filePath),&#10;            $this-&gt;filesystem-&gt;lastModified($filePath),&#10;        );&#10;    }&#10;&#10;    public function addBinaryFile(string $filePath, ?string $newFilename = null): void&#10;    {&#10;        $this-&gt;addFile($filePath, $newFilename);&#10;    }&#10;&#10;    public function addFileData(string $data, string $filename, int $time = 0): void&#10;    {&#10;        $this-&gt;archive-&gt;addString($filename, $data, $time);&#10;    }&#10;&#10;    public function addBinaryFileData(string $data, string $filename, int $time = 0): void&#10;    {&#10;        $this-&gt;addFileData($data, $filename, $time);&#10;    }&#10;&#10;    public function toResponse(string $name = 'archive'): ResponseInterface&#10;    {&#10;        $responseFactory = new Psr17Factory();&#10;        $streamFactory = new Psr17Factory();&#10;&#10;        $stream = $streamFactory-&gt;createStreamFromFile($this-&gt;tmpFile, 'rb');&#10;&#10;        return $responseFactory-&gt;createResponse(200)&#10;            -&gt;withHeader('Content-Type', $this-&gt;mimetype)&#10;            -&gt;withHeader('Content-Disposition', sprintf('attachment; filename=&quot;%s%s&quot;', $name, $this-&gt;ext))&#10;            -&gt;withHeader('Expires', '0')&#10;            -&gt;withHeader('Pragma', 'no-cache')&#10;            -&gt;withBody($stream);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ZipDownloader.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ZipDownloader.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;declare(strict_types=1);&#10;&#10;namespace Imponeer\PackageDownloader;&#10;&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\FilesystemException;&#10;use Nyholm\Psr7\Factory\Psr17Factory;&#10;use PhpZip\Exception\ZipEntryNotFoundException;&#10;use PhpZip\Exception\ZipException;&#10;use PhpZip\ZipFile;&#10;use Psr\Http\Message\ResponseInterface;&#10;&#10;class ZipDownloader extends Downloader&#10;{&#10;    private ZipFile $archive;&#10;&#10;    public function __construct(&#10;        string $ext = '.zip',&#10;        string $mimetype = 'application/x-zip',&#10;        ?Filesystem $filesystem = null,&#10;    ) {&#10;        parent::__construct($ext, $mimetype, $filesystem);&#10;&#10;        $this-&gt;archive = new ZipFile();&#10;    }&#10;&#10;&#10;    /**&#10;     * @throws FilesystemException&#10;     * @throws ZipException&#10;     */&#10;    public function addFile(string $filePath, ?string $newFilename = null): void&#10;    {&#10;        $this-&gt;archive-&gt;addFromStream(&#10;            $this-&gt;filesystem-&gt;readStream($filePath),&#10;            $this-&gt;resolveFilename($filePath, $newFilename)&#10;        );&#10;    }&#10;&#10;    /**&#10;     * @throws FilesystemException&#10;     * @throws ZipException&#10;     */&#10;    public function addBinaryFile(string $filePath, ?string $newFilename = null): void&#10;    {&#10;        $this-&gt;addFile($filePath, $newFilename);&#10;    }&#10;&#10;    /**&#10;     * @throws ZipEntryNotFoundException&#10;     * @throws ZipException&#10;     */&#10;    public function addFileData(string $data, string $filename, int $time = 0): void&#10;    {&#10;        $this-&gt;archive-&gt;addFromString($filename, $data);&#10;        if ($time &gt; 0) {&#10;            $this-&gt;archive-&gt;getEntry($filename)-&gt;setTime($time);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * @throws ZipEntryNotFoundException&#10;     * @throws ZipException&#10;     */&#10;    public function addBinaryFileData(string $data, string $filename, int $time = 0): void&#10;    {&#10;        $this-&gt;addFileData($data, $filename, $time);&#10;    }&#10;&#10;    /**&#10;     * @throws ZipException&#10;     */&#10;    public function toResponse(string $name = 'archive'): ResponseInterface&#10;    {&#10;        $responseFactory = new Psr17Factory();&#10;&#10;        $body = $responseFactory-&gt;createStream(&#10;            $this-&gt;archive-&gt;outputAsString()&#10;        );&#10;&#10;        return $responseFactory-&gt;createResponse(200)&#10;            -&gt;withHeader('Content-Type', $this-&gt;mimetype)&#10;            -&gt;withHeader('Content-Disposition', sprintf('attachment; filename=&quot;%s%s&quot;', $name, $this-&gt;ext))&#10;            -&gt;withHeader('Expires', '0')&#10;            -&gt;withHeader('Pragma', 'no-cache')&#10;            -&gt;withBody(&#10;                $body&#10;            );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;declare(strict_types=1);&#10;&#10;namespace Imponeer\ArchiveDownloadBuilder;&#10;&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\FilesystemException;&#10;use Nyholm\Psr7\Factory\Psr17Factory;&#10;use PhpZip\Exception\ZipEntryNotFoundException;&#10;use PhpZip\Exception\ZipException;&#10;use PhpZip\ZipFile;&#10;use Psr\Http\Message\ResponseInterface;&#10;&#10;class ZipDownloader extends Downloader&#10;{&#10;    private ZipFile $archive;&#10;&#10;    public function __construct(&#10;        string $ext = '.zip',&#10;        string $mimetype = 'application/x-zip',&#10;        ?Filesystem $filesystem = null,&#10;    ) {&#10;        parent::__construct($ext, $mimetype, $filesystem);&#10;&#10;        $this-&gt;archive = new ZipFile();&#10;    }&#10;&#10;&#10;    /**&#10;     * @throws FilesystemException&#10;     * @throws ZipException&#10;     */&#10;    public function addFile(string $filePath, ?string $newFilename = null): void&#10;    {&#10;        $this-&gt;archive-&gt;addFromStream(&#10;            $this-&gt;filesystem-&gt;readStream($filePath),&#10;            $this-&gt;resolveFilename($filePath, $newFilename)&#10;        );&#10;    }&#10;&#10;    /**&#10;     * @throws FilesystemException&#10;     * @throws ZipException&#10;     */&#10;    public function addBinaryFile(string $filePath, ?string $newFilename = null): void&#10;    {&#10;        $this-&gt;addFile($filePath, $newFilename);&#10;    }&#10;&#10;    /**&#10;     * @throws ZipEntryNotFoundException&#10;     * @throws ZipException&#10;     */&#10;    public function addFileData(string $data, string $filename, int $time = 0): void&#10;    {&#10;        $this-&gt;archive-&gt;addFromString($filename, $data);&#10;        if ($time &gt; 0) {&#10;            $this-&gt;archive-&gt;getEntry($filename)-&gt;setTime($time);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * @throws ZipEntryNotFoundException&#10;     * @throws ZipException&#10;     */&#10;    public function addBinaryFileData(string $data, string $filename, int $time = 0): void&#10;    {&#10;        $this-&gt;addFileData($data, $filename, $time);&#10;    }&#10;&#10;    /**&#10;     * @throws ZipException&#10;     */&#10;    public function toResponse(string $name = 'archive'): ResponseInterface&#10;    {&#10;        $responseFactory = new Psr17Factory();&#10;&#10;        $body = $responseFactory-&gt;createStream(&#10;            $this-&gt;archive-&gt;outputAsString()&#10;        );&#10;&#10;        return $responseFactory-&gt;createResponse(200)&#10;            -&gt;withHeader('Content-Type', $this-&gt;mimetype)&#10;            -&gt;withHeader('Content-Disposition', sprintf('attachment; filename=&quot;%s%s&quot;', $name, $this-&gt;ext))&#10;            -&gt;withHeader('Expires', '0')&#10;            -&gt;withHeader('Pragma', 'no-cache')&#10;            -&gt;withBody(&#10;                $body&#10;            );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/ZipDownloaderTest.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/ZipDownloaderTest.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace Imponeer\PackageDownloader\Tests;&#10;&#10;use Imponeer\PackageDownloader\ZipDownloader;&#10;use League\Flysystem\FileAttributes;&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\FilesystemException;&#10;use League\Flysystem\InMemory\InMemoryFilesystemAdapter;&#10;use PHPUnit\Framework\TestCase;&#10;use PhpZip\Exception\ZipException;&#10;&#10;class ZipDownloaderTest extends TestCase&#10;{&#10;    private Filesystem $filesystem;&#10;&#10;    /**&#10;     * @throws FilesystemException&#10;     */&#10;    protected function setUp(): void&#10;    {&#10;        $this-&gt;filesystem = new Filesystem(new InMemoryFilesystemAdapter());&#10;        $this-&gt;filesystem-&gt;write('a.txt', 'A');&#10;        $this-&gt;filesystem-&gt;write('b.txt', 'B');&#10;    }&#10;&#10;    /**&#10;     * @throws FilesystemException&#10;     * @throws ZipException&#10;     */&#10;    public function testToResponseHeadersAndBody(): void&#10;    {&#10;        $downloader = new ZipDownloader(&#10;            filesystem: $this-&gt;filesystem&#10;        );&#10;&#10;        foreach ($this-&gt;filesystem-&gt;listContents('/') as $item) {&#10;            if (!$item-&gt;isFile()) {&#10;                continue;&#10;            }&#10;&#10;            assert($item instanceof FileAttributes);&#10;&#10;            $downloader-&gt;addFile($item-&gt;path(), $item-&gt;path());&#10;        }&#10;&#10;        $response = $downloader-&gt;toResponse('pack');&#10;        $this-&gt;assertEquals(&#10;            'application/x-zip',&#10;            $response-&gt;getHeaderLine('Content-Type')&#10;        );&#10;        $this-&gt;assertStringContainsString(&#10;            'attachment; filename=&quot;pack.zip&quot;',&#10;            $response-&gt;getHeaderLine('Content-Disposition')&#10;        );&#10;        $body = (string) $response-&gt;getBody();&#10;        $this-&gt;assertNotEmpty($body);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace Imponeer\ArchiveDownloadBuilder\Tests;&#10;&#10;use Imponeer\ArchiveDownloadBuilder\ZipDownloader;&#10;use League\Flysystem\FileAttributes;&#10;use League\Flysystem\Filesystem;&#10;use League\Flysystem\FilesystemException;&#10;use League\Flysystem\InMemory\InMemoryFilesystemAdapter;&#10;use PHPUnit\Framework\TestCase;&#10;use PhpZip\Exception\ZipException;&#10;&#10;class ZipDownloaderTest extends TestCase&#10;{&#10;    private Filesystem $filesystem;&#10;&#10;    /**&#10;     * @throws FilesystemException&#10;     */&#10;    protected function setUp(): void&#10;    {&#10;        $this-&gt;filesystem = new Filesystem(new InMemoryFilesystemAdapter());&#10;        $this-&gt;filesystem-&gt;write('a.txt', 'A');&#10;        $this-&gt;filesystem-&gt;write('b.txt', 'B');&#10;    }&#10;&#10;    /**&#10;     * @throws FilesystemException&#10;     * @throws ZipException&#10;     */&#10;    public function testToResponseHeadersAndBody(): void&#10;    {&#10;        $downloader = new ZipDownloader(&#10;            filesystem: $this-&gt;filesystem&#10;        );&#10;&#10;        foreach ($this-&gt;filesystem-&gt;listContents('/') as $item) {&#10;            if (!$item-&gt;isFile()) {&#10;                continue;&#10;            }&#10;&#10;            assert($item instanceof FileAttributes);&#10;&#10;            $downloader-&gt;addFile($item-&gt;path(), $item-&gt;path());&#10;        }&#10;&#10;        $response = $downloader-&gt;toResponse('pack');&#10;        $this-&gt;assertEquals(&#10;            'application/x-zip',&#10;            $response-&gt;getHeaderLine('Content-Type')&#10;        );&#10;        $this-&gt;assertStringContainsString(&#10;            'attachment; filename=&quot;pack.zip&quot;',&#10;            $response-&gt;getHeaderLine('Content-Disposition')&#10;        );&#10;        $body = (string) $response-&gt;getBody();&#10;        $this-&gt;assertNotEmpty($body);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>